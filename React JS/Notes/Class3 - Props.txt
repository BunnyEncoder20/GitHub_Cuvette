/*
*       Agenda : Props 
*-------------------
*   1. What are props 
*   2. Types of Props   
*       > string 
*       > number
*       > boolean
*       > array
*       > function
*       > object
*   3. destructuring of props 
*   4. propTypes 
*   5. default props 
*   6. required props
*
*/

/*
    Props Intro
    ----------
    > They are used to create multiple copies of a template and pass dynamic info to them
        so that they show unique information on the app 
    > They are basically like arguements you are passing to the component   
        function.
    > Eg : 
        <ComponentName property1={"Name"} property2={40} />

        // And in the componenetName.js : 
        function Card( props ) {
          return (
            <div>

                <h1> {props.title} </h1>
                <p>₹ {props.price} </p>

            </div>
          )
        }xxx
    
    > Props can be destructured also (broken down into smaller variables in componentName.js)
    > Eg : 
        function Card( {title,price} ) {
          return (
            <div>

                <h1> {title} </h1>
                <p>₹ {price} </p>

            </div>
          )
        }

    > We can check the prop-types (numeric,string,boolean,etc) by using an additional
        package called 'prop-types'
        Syntax to install : npm i prop-types (in terminal)
    > We can use it in our componentName function file to set the prop-types for that 
        function .
        Syntax to import : 
            import PropTypes from 'prop-types' ;
            Card.PropTypes = {
                title: PropTypes.string,
                price: PropTypes.number
            }
    
    > Use the shortcut rfcp (react functional component with Propstypes) to get  the 
        Functional Component with Prop-types templates 

    > We can also set defaut values for the props : 
        Eg : 
            componentName.defaultProps = {
                title : 'defaultTitle'
            } 

    > We can also make it so that a prop to be passed is necessary by marking it as required
    Eg : 
        Card.PropTypes = {
                title: PropTypes.string,
                price: PropTypes.number.isRequired
            }
*/