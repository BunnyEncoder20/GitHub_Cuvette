/*
*           Agenda : Routing , Third Party Libraries & CSS modules
* ---------------------------------------------------------
*   1. React routing 
*   2. Third Party Libraries / Packages
*   3. NPM / YARN
*   4. react-icons
*   5. moment
*   6. axios
*
*/

/*
    React Routing 
    ------------
    > React doesn't have anything in-built to handle rounting on it's own
    > Rounting is important , as me manytimes need to make multiple pages of the website 
        which is not possible without routing (route = link of the page you currently at)
        https://myDomain/index.html = home page
        https://myDomain/about.html = about page

    > Package widely used : react-router-dom (V6)
    ***NOTE : V5 of react-router-dom is very different from the latest version V6
    > To check the version of current packages installed in the project visit : 
        package.json file 
*/

/*
    Using the Browser Router in React
    ------------------------------
    > Note that the browserRouter should be loaded from the same place where all the 
        other components of the app are being loaded from (else routing may not function as intended)
    > <BrowserRouter> is used for defining that all the components within (Maybe say App.jsx
        are up for routing)
    > Apart from that, when we define other components which will make routing (or page
        change to happen) we need to use the <routes></routes> tags (to define a bunch of routes)
    
    > Though routing may seem very nice , but we should try for internal links installed
    > This helps in eliminating the reloading / loading of new pages and makes the websites
        faster
    > Generally the external routing is handled by the deployment service you use 
    > Hence we just need to focus on the internal routing  
*/

/*
    Using Link to in React Rounting 
    ---------------------------
    > <Link to=''> is the tag which is used for internal routing
    > It helps revent unecessary loading / reloading of pages whenever we try to route
        to new page / internal link
    > Eg : 
        import { Link } from 'react-router-dom'

        <div>I'm a AboutPage</div>
        <Link to="/">Click to go to HomePage</Link>

        <div>I'm a HomePage</div>
        <Link to="/about">Click to go to AboutPage</Link>
*/

/*
    NPM & YARN
    -----------
    > Both of them are packages managers for React 
    > Both are used to install packages into the Project 
    > Should look for packages which have high weekly downloads, they'll have bug fixes
        and guides online more 
*/

/*
    1. moment package : used for date and time purposes 

    2. axios package : a promise (any asynchronos operation results in promise) based 
        HTTP client for browser and node.js.
        > Installing axios : npm i axios
        > GET call : is when you just ring the server bell and get some info from the server
        > POST call : when you ring the server and give some data of your own which the 
                            server will process and give something in return 
*/

/*
    CSS modules 
    -----------
    > In React , we need to use unique class names otherwise the CSS will be mixed up for
        2 or more components 
    > This is because at the end of the webpack compiling , React combines all the pages
        and css into 1 single file , which it shows on the browser. Hence there will be multiple
        classes with the same name in the same location, it causes the overlap
    
    > This is a problem in large scale production applications 
    > Can be avoided by using ComponentName in front of the class names
    Eg  : homepage_Container 
            aboutpage_container
    > But that not the best approach. We can instead use the CSS modules 
    
    > CSS Module basically makes it so that the CSS remains local to only that one components
        it is meant for.
    > For this  : 
    1. homepage.css -> homepage.module.css  // Rename the css file 
    2. import variableName from './homepage.module.css'       // import the css into a variableName
    3. < div className= { varibaleName.CSSclass } >     // using variableName get the required style 
*/

/*
    React icons
    ----------
    > Installation : npm i react-icons --save
    > Webpage : https://react-icons.github.io/react-icons/
    > We can use the search bar to search for any icons we need 
    > Usage : (NOTE : iconName is copied from the website itself)
    import {iconName} from 'react-icons/fa' ;
    class question extends REact.Component {
        render() {
            return <div> iconName </div>
        }
    }

    > Always Remember that GOogle is your best friend. Always visit the webpages and 
        documentations to learn about the packages which you need to use in your projects 
*/