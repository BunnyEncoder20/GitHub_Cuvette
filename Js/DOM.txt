DOM : Document Oject Model 
-------------------------
-> Not a part of / concept of core JS. It is something that is created by the browser. 
-> DOM is like a interface between the HTML / CSS elements and the JS

-> window : (type and enter in console of browser) is like a universal (more like a 
    galaxy) parent object of everyhting we see on the browser window
-> One of it's properties is the document (kinda like a solar system)
-> Document will contain all the things required to manipulate our entire html 
    document.

-> HTML (the tag) has also become an object now


#1) Accessing your DOM elements 
-----------------------------
Using methods : 
document.getElementByID('ID') ;
document.getElementsByClassName('Class_Name') ;
document.getElementsByTagName('HTML_Tag') ;

***Remember that : 
    -> document.getElementByID() returns one unique html element
    -> document.getElementsByClassName() returns an htmlCollection
        (an array of elements), in which  the actual html elements are 
        accessible using index
    -> document.getElementByTagName() also behaves same as ClassName()


#2) Manipulating DOM elements 
----------------------------
*** NOTE 
    > Each html element returned by DOM is an object (will have 
        predefined properties and methods eg : obj.innerHtml, 
        obj.innerText)

Eg:
let DOMelement1 = document.getElementById('h2').innerText = "Changed using JS" ;

let htmlCollection1 = document.getElementsByClassName('head3')
htmlCollection1[0].innerHTML = "<u>Changed using JS</u>"


#3) Creating Alternative Styles using DOM
-------------------------------------
Syntax : document.getElementByID('ID').style.anyCSSproperty = "value" ;

Eg : 
let htmlCollection2 = document.getElementsByTagName('h1');
htmlCollection2[0].style.color = 'violet' ;



#4) Creating Dynamic DOM elements
-------------------------------
Syntax : let element = document.createElement('elementName')

Eg:
    let buttonElement = document.createElement('button') ;
    button.innerText = "Click to Submit" ; 

#5) Placing the Created DOM elements onto the Page 
---------------------------------------------
Using : append, appendChild, insertBefore, insertAfter, etc


#6) Event in JS 
-------------
Event	            Description
----------     ----------
onchange	    An HTML element has been changed
onclick	           The user clicks an HTML element
onmouseover	 The user moves the mouse over an HTML element
onmouseout	  The user moves the mouse away from an HTML element
onkeydown	   The user pushes a keyboard key
onload	           The browser has finished loading the page


***NOTE : Event Bubbling
    > occurs when one event listener is embedded inside another event listern HTML element
    > Eg : an button inside a div element and both are listerning for a onclick event
    > Can 


#7) Event listeners 
-----------------