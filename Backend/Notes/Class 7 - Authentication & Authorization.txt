Agenda : 
--------
1. Handling Login 
2. Registering new users 
3. How to encrypt data 

Related code files in : Node Server 5
installations :  npm i ejs express body-parser mongoose dotenv cors 

#1 Login 
--------
Remember : 
    - Truthy values : values which are considered true by default (Eg : Strings)
    - Falsy values : values which are considered false by default (Eg : empty strings)

app.post('/server5/login' , async (req,res) => {
    try{
        const {mEmail, mPassword} = req.body ;
        // checking if data has come or not 
        if (!mEmail || !mPassword) {
            return res.status(400).json({
                status: 'FAIL',
                msg: 'Incomplete data',
            });
        }

        // Quering the DB to find the specific user
        const user = await memberModelref.findOne({mEmail, mPassword})

        // If user doesn't exist : 
        if( !user ){
            return res.status(404).json({
                status: 'FAIL',
                msg: '[Mongo] User not found',
            })
        }

        // else return the user info : 
        res.json({
            Status : "SUCCESS" ,
            msg : `${user.mName} login successful`
        })

    }
    catch (err) {
        res.status(500).json({
            status : 'FAIL',
            msg : '[Server] Something went wrong ... ',
            error : err
        })
    }
})


#2 Handling Registration
-----------------------
app.post('/server5/signup' , async (req,res) => {
    try{
        const {mName, mEmail, mPassword} = req.body ;

        // Check if the required properties are present in the request body
        if (!mName || !mEmail || !mPassword) {
            return res.status(400).json({
                status: 'FAIL',
                msg: 'Incomplete data',
            });
        }
        // else making the document 
        await memberModelref.create({
            mName, mEmail, mPassword
        })
        res.json({
            status : 'SUCCESS' ,
            user : mName ,
            msg : ' user added'
        })
    }
    catch (err) {
        res.status(500).json({
            status : 'FAIL',
            msg : 'Something went wrong while adding user',
            error : err
        })
    }
}) 




#3 Encrypting data 
-----------------
> The password is exposed when we are creating new users like this .
> Anyone (admin/hackers) can login as users and get all our info 
> To mitigate this vulnerability : we always save passwords in encrypted formats 
> This way even admins cannot login as the user 
> Doc - https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:online-data-security/xcae6f4a7ff015e7d:data-encryption-techniques/a/encryption-decryption-and-code-cracking

