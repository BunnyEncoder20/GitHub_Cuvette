Initalizing node / express folder 
----------------------------
> npm init -y 
-y = all the basic files to be included 

Installing express library 
----------------------
> npm i express 

Installing nodemon (it is a dev dependancy for auto restarting server)
--------------------------------------
This helps use by automatically restarting the server everytime we make a new 
change 

1. Install the dependancy :
> npm i --save-dev nodemon

2. Inside the package.json file add the following code inside the "scripts" block :
> "devStart" : "nodemon serverFileName.js"

3. Finally to get teh server up and running, in terminal enter the command : 
> npm run devStart 

*******************************************
Better way to nodemon : 
1. Installing it globally : npm i nodemon -g
2. nodemon fileName.js 
*******************************************




Boilplate code for express server 
-----------------------------
const express = require('express') ;
const app = express() ;
const port = 3000 ;

app.get('/' , (req,res) => {
    res.send("Hello World !")
})

app.listen(port , (err) => {
    if(!err) {
        console.log(`Server is up and running at port ${port}`)
    }
})



Setting up routes in the express server 
----------------------------------
> Main requests we'l be dealing with : 
1. get (read)
2. post (creating)
3. put / patch (updating)
4. delete (deleting)

> syntax : 
    app.get('/path' , (request, response)=>{
        console.log(''got a request) ;
        response.send("Send something back to the user from here) ;  //used to send responses to user 
    })

eg :
    app.get('/' , (req,res) => {
        res.send("Hellow World UwU")
    })



> We could also send server codes to the user : 
app.get('/' , (req,res)=>{
    console.log('sending an error code...') ;
    res.status(500).send("Check the console to see the status error code !")
})

> Mostly we will be sending json back with the errors : 
app.get('/' , (req,res)=>{
    console.log('sending an error code...') ;
    res.status(500).json({message : "Error!"})
})


> Primarily , we will be rendering an html or some other file : 
> For that we use the render method : 
Eg : 
app.get('/' , (req,res)=>{
    console.log('Thois block renders an file...') ;
    res.render(__dirname+'/path to file/fileName')
})

Eg : 
app.get('/about' , (req,res) => {
    res.sendFile(__dirname+'/about.html')       // note the absence of . in ./fileName when we use the __dirname 
})

Note : Most of the pages are stored inside a "views" folder



> Sending a file to the user to download : 
app.get('/' , (req,res)=>{
    console.log('Response for dowonloading a file...') ;
    res.download('/path_2_file')
})

> We can embed this link into an html page (for example) using an anchor tag : 
<a href="/downloadlogo">Click to Download </a>

*** Note that the href has to the route which we setup for the download in server.js: 
app.get('/downloadlogo' , (req,res)=>{
    res.download(__dirname+'/chickn nuggit.jpeg')
}) 



> Handling Forms in Express (using the name attribute in input fields)
------------------------------------------------------------
'name' attribute in the input field becomes the variable name for the backend which 
will contain that input data.

NOTE :  app.get() is not a safe way to send data to the backend. Make a seperate POST 
api call to handle the form data by using the route : './api/formPageRoute
Eg : 
// To display the registeration form itself 
app.get('/register' , (req,res) => {
  res.sendFile(__dirname+'/register.html')
})

// To handle the data sent to the backend
app.post('/api/register',(req,res) => {
  res.send('Your data has been successfully stored') ;
})

// to send the user to the successfull landing page : 
app.get('/register/sucess',(req,res)=>{
  console.log('Processing the data')
})

<h1>Registeration Form</h1>
    <form method="POST" action="/api/register">     // NOTE these method and action attributes
        <input type="text" name="mail" id="mail" placeholder="Email Address">
        <input type="password" name="password" id="password" placeholder="Password">
        <button type="submit">Submit</button>
</form>

NOTE : 
> In order to acess the data from the front end (in a meaningfull manner) we need a additional package : 
npm i body-parser  //Installing
const bodyParser = require('body-parser')   //importing it 
app.use(bodyParser.urlencoded({extended:false}))

Thus the Routes will look something like : 
app.get('/register' , (req,res) => {
  res.sendFile(__dirname+'/register.html')
})

app.post('/api/register',(req,res) => {
  console.log(req.body)
  res.redirect('/register/sucess');     // for sending the user to success page
})

app.get('/register/sucess',(req,res)=>{
  res.send('Your Data has been stored successfully')
})
