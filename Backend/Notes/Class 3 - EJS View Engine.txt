Agenda : 
View Engine : EJS 
Request Parameters 

Building Dynamic Pages 
*************************
> In Social media websites, we can see that the links (routes) end with the user's name
    Eg : In linkedIn the profiles pages routes look like 
         https://www.linkedin.com/in/saptajit-banerjee
         https://www.linkedin.com/in/gnana-bharathi

> The pages routes are not custom made for each users. The template of each page is the 
    same, just the data passed into these pages from the backend is different. 



View Engine  - EJS 
********************
> Just one template page is made and it is used to render all the profile pages of that 
    website 
> EJS (Embedded Javascript Templating) View engine helps us create these dynamic pages

@ Steps : 
1. Installation : 
> npm install ejs

2. Importing it into the server : 
> const ejs = require('ejs')

3. Setting the template to ejs : 
Syntax : app.set('what_to_be_set' , 'set_to_this') ;
> app.set('view engine' , 'ejs' )

4. Create a seperate folder for views 

5. Create files within the folder using the extension .ejs 
> Eg : profileTemplate.ejs 

6. Write whatever html you want to inside that file 
> Remember how to use the variables inside the .ejs file : 
Eg : 
    <h1> <%= Variable %> </h1>

7. Create the route for the file : 
> Basic route : 
    app.get('/ejsFile_under_view_folder' , (req,res) => {
      res.render('temp')    
    })

> Route with sending object of variables : 
    app.get('/Topic2' , (req,res) => {
      res.render('temp' , { 
        variable1 : 'Value1' 
        variable2 : 'Value2'
        variable3 : 'Value3'
        })
    })

> If the details are in an js array then we can also used the .find() method for fetching 
    details : 
    app.get('/George' , (req,res)=>{
      let details = dummyUsersDB.find(user=>user.first_name === "George");  //dont use ()=>{} here, it doesn't work 
      console.log(details);
      res.render('profileTemplate', details)
    })

> Using if else statements in dynamic renders : 
Eg : 
    <% if (likescake) { %>          // note that likecake is a boolean ejs variable 
        <h5>Yeh ! You like cake !</h5>
        <% } %>

> We can also use loops to render something for number of times 




2. Request Parameters
*********************** 
> a good way to get information from the url. using string PARAMS (ref notes Class 2 - middlewares)
> how to access the variables from the URL : http://localhost:3000/example?product=shirts

    app.get('/example/:parameter' , (req,res) => {      // do not forget the first '/' && ':' before the variable name in route
      console.log(req.params.parameter)
      res.json({value:req.params.parameter})
    })

> This way we can reduce all the user functions to a single function like : 
Eg : 
// Making all the user functions into a single function : 
    app.get('/profiles/:username',(req,res)=>{
      let username = req.params.username ;
      // console.log(username)
      let userdetails = dummyUsersDB.find(user=>user.first_name === username);
      console.log(userdetails);
      res.render('profileTemplate', userdetails)
    })

> Error handling can also be done using the Request Parameters for the above function
Eg : 
    app.get('/profiles/:username',(req,res)=>{
        let username = req.params.username ;
        // console.log(username)
        let userdetails = dummyUsersDB.find(user=>user.first_name === username);

        if (userdetails) {
          console.log(userdetails);
          res.render('profileTemplate', userdetails)
        }
        else {
          console.log('User was not found')
          res.render('notFound')        //rendering a different Error page if user not found
        }
    })