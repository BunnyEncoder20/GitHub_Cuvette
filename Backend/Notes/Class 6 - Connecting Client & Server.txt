Agenda
********
> Connecting Client and server ie: connecting React App with a Node App
> React Bootstrap
> Axios
> related file in Folder : ./SocialMediaApp


# Steps for making a Complete MERN Stack Project 
--------------------------------------------
1. Making a Project Folder (generally your git repo title)
2. Create 2 folders : Client and Server 
3. client side installations : 
    > npm create vite@latest .         // initializing the project inside the client folder
    > npm i 
    > npm install react-bootstrap bootstrap     // installing react-bootstrap (optional)
    > New-Item -ItTemType Directory -Path "components", "controller"s", "db", "middlewares", "models",e "routes", "utils"     //creating the folders required from the powershell cmd
4. server side installations : 
    > npm init
    > npm i express ejs body-parser dotenv mongoose
    > npm i -D nodemon                                                  // installing nodemon as a dev dependancy, We already have it globally installed in our BAT COMPUTER



! IMPORTANT !
**********************
React-bootstrap doesn't work well with Vite, so when you planning to use React-Bootstrap use cra for project creation
**********************


# React BootStrap 
----------------
Documentation : https://react-bootstrap.netlify.app/docs/getting-started/introduction
> When we want to create basic components fast, we can import them from bootstrap 
> So there is a specific version made for react which will export the components instead of just html-css-NodeJs
> Installations : 
                        npm install react-bootstrap bootstrap
                        {
                            // copy the following lines in App.jsx : 
                            import 'bootstrap/dist/css/bootstrap.min.css';

                            // paste the following in index.html : (src = https://getbootstrap.com/docs/4.6/getting-started/introduction/)
                            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
                        }

> Usage : 
    1. Import the component 
    2. use the component in the return part
    3. Eg : importing a button component:
                                                import Button from 'react-bootstrap/Button';
                                                function myComponent() {
                                                    return (
                                                        <>
                                                        <Button variant="primary">Primary</Button>
                                                        <Button variant="secondary">Secondary</Button>
                                                        </>
                                                    );
                                                }

                                                export default myComponent; 
    4. Eg importing multiple components :
                                                import Button from 'react-bootstrap/Button';    // importing 
                                                import Figure from 'react-bootstrap/Figure';        
                                                <OR>
                                                import {Button, Figure} from 'react-bootstrap'   // destructure importing
                                                import tempImg from './assets/react.svg'

                                                function myComponent() {
                                                  return (
                                                    <>
                                                      <Button variant="primary">Primary</Button>        // using the bootstrap component 
                                                      <Button variant="secondary">Secondary</Button>
                                                      <Button variant="primary">Primary</Button>{' '}
                                                      <Button variant="secondary">Secondary</Button>{' '} <br /><br />
                                                        <Figure>
                                                            <Figure.Image
                                                                width={171}
                                                                height={180}
                                                                alt="171x180"
                                                                src={tempImg}
                                                            />
                                                            <Figure.Caption>
                                                                Nulla vitae elit libero, a pharetra augue mollis interdum.
                                                            </Figure.Caption>
                                                        </Figure>
                                                    </>
                                                  );
                                                }

                                                export default myComponent;
    5. Custom CSS for the bootstrap components : 
        > Make a myComponent.css file and add your custom css there 
            /* Navbar.css - get the accurate classes from the inspecting the elements*/
                .navbar-light .navbar-brand {
                    color: white;
                }

                .navbar-light .navbar-nav .nav-link {
                    color: white;
                }


> Points to remember when using bootstrap : 
    1. don't use both bootstrap and tailwindcss in the same project, will cause issues 
    2. remove all the things in index.css, App.css file when using bootstrap components otherwise there are conflicting styles (margins, paddings, borders, etc)
    3. If you to add more styling/modify, create a component.css in that components's folder and add teh css there
    4. There are some modifications (like color) also available in the bootstrap website only 
    

# Components used in class : 
------------------------
1. Button Component : for making quick buttons - https://react-bootstrap.netlify.app/docs/components/buttons/
2. Card Component : for making a card displaying image, description, button init - https://react-bootstrap.netlify.app/docs/components/cards/
3. Layout Components - Row&Cols - https://react-bootstrap.netlify.app/docs/layout/grid


# Example of Card component used using .map() : 
------------------------------------------
 <Container>
    <h1>Users</h1>
    <Row>
        {/* Notice how we are using the .map() method to iterate over each of the users */}
        {/* Don't forget teh index and key for optimizing the iteration */

        {   Users.map((user, index) => (
                <Col md={3} key={index} >           // index and key is recommended to use when dealing with list items (iterables)
                    <Card style={{ width: '18rem' }}>
                        <Card.Img variant="top" src={user.avatar} />
                        <Card.Body>
                            <Card.Title>{user.first_name} {user.first_name}</Card.Title>
                            <Card.Text>
                                {user.email}
                            </Card.Text>
                            <Button variant="dark">Go somewhere</Button>
                        </Card.Body>
                    </Card>
                </Col>
            )) 
        } 
    </Row>
</Container>


# Creating a new User (or sending new records to the database)
-------------------------------------------------------
// a state to store the information of the new record : 
const [newUser, setNewUser] = useState({
    first_name: '',
    last_name: '',
    email: '',
    avatar: ''
})


// a function to handle the submit click using a post request
const handleSubmit = () => {
    axios
        .post('http://localhost:4000/users' , newUser)          // notice that we are using a post call here and sending the data in the 2nd param
        .then(() => console.log("User added Successfully !"))
        .catch((err) => console.log("[ERROR] : ", err))
}

// A simple form to collect the data, adds the info to the record object when there is an input and finally calls the handler function
<h3>Add a new User</h3>
<input type="text" placeholder='First Name' value={newUser.first_name} onInput={(e) => { setNewUser({ ...newUser, first_name: e.target.value }) }} /> <br />
<input type="text" placeholder='Last Name' value={newUser.last_name} onInput={(e) => { setNewUser({ ...newUser, last_name: e.target.value }) }} /> <br />
<input type="text" placeholder='Email' value={newUser.email} onInput={(e) => { setNewUser({ ...newUser, email: e.target.value }) }} /> <br />
<input type="text" placeholder='Avatar URL' value={newUser.avatar} onInput={(e) => { setNewUser({ ...newUser, avatar: e.target.value }) }} /> <br />

<Button variant="dark" onClick={handleSubmit}>Submit</Button>

> NOTE :  Because we are sending an json object this time , we should also have a middleware to deal with it : 
app.use(bodyParser.json()) ;


*- PS -*
It is better idea to make a function to fetch the latest user data and call whenever there is addition of new record






# Axios package 
--------------
> Basically a better way to make request from frontend/client side 
> Instead of using .fetch() which has a lot of overhead, we use .get() from axios instead 
> Eg : 
        useEffect(() => {
            axios 
                .get('https://reqres.in/api/users')
                .then((res) => console.log("[res] : ",res.data.data))        // NOTE : res.data will return the Object return from the call
                .catch((err) => console.log("[ERROR] : ",err))
        })
> NOTE for the given link, the response sent back has a field called data. Hence to access that , we use res.data.data

> Hence when we want the frontend to access teh data from our Server : 
    useEffect(() => {
        axios
            .get('http://localhost:4000/users')         // just insert our server link here
            .then((res) => setUsers(res.data.data))
            .catch((err) => console.log("[ERROR] : ", err))
    })


> NOTE : without the CORS npm package this will cause a CORS error - https://www.npmjs.com/package/cors
> Installation : 
                npm install cors
> Usage : 
            1. Allowing all CORS requests
                var cors =  require('cors')
                app.use(cors())
            
            2. Allowing only a single route

            3. Allowing a whitelisted array of links : 