Agenda 
********
Mongoose - Schemas , methods and REST API

/*
    Mongoose data Modelling 
    ----------------------
    > Create a data model file (preferably in 'models' folder)
                - dataPoint.models.js 
    
    > Import mongoose into it 
                import mongoose from "mongoose" 
                const userSchema = new mongoose.Schema({})
                export const ModelName = mongoose.model( "ModelName" , userSchema)         // Notice the ModelName starts with a capital

    NOTE : when we make a model like this, the "ModelName" in the MongoDB, it'll become all lowercase and plural
                Hence ModelName ==> modelnames (in the MongoDB side)
                the .model() asks for 2 parameters : what to name the model ? && What to base the model on ? (Which schema)

    > inside the schema({}) object we put our data : 
                const userSchema = new mongoose.Schema({
                    username : String ,
                    email : String ,
                    isActive : Boolean
                })
    
    > A more professional approach would be taking advantage of MongoDB functionality and making a object : 
                const userSchema = new mongoose.Schema({
                    username : {
                        type : String ,         // defining the data type of the field 
                        required : true,       // making it required 
                        unique : true,          // ensures the data entered is unique in the field 
                        lowercase : true    // ensures that all string entered is all in lowercase
                    } , 
                    email : {
                        type : String ,         // type is almost always the first thing you define for a data field 
                        required : true ,
                        unique : true ,
                    } , 
                    password : {
                        type : String ,
                        required : [true, "Password is required field"]  //custom validator message  
                    }
                })

    >  The things we are defining inside the fields are validators. Mongoose also gives the option to define 
        custom validators (Watch YT or look at Mongoose documentation for more information)

    > Another thing which is common to do when working with backend and DB is the use of timestamps. 
        Mongoose already has built-in  properties to get these values for a data entry : 
                createdAt
                updatedAt
        These are passed as secondary object (together under one variable name 'timestamps') after passing 
        the schema as the primary object : 
                const userSchema = new mongoose.Schema(
                    {...} ,
                    {timestamps : true} 
                )


    > When creating the data types sometimes we want a data which is related to another field in our DB 
        eg : createdBy data field will need the data from the userSchema model 
        In this situation remember 2 things : 
            1. It is a special type - mongoose.Schema.Types.ObjectId
            2. ref - the string name which we pass as the first argument for mongoose.model() of that model
        eg : 
                const dataPoint2Schema = new mongoose.Schema(
                    {
                        content : {
                            type : String ,         
                            required : true ,
                        } , 
                        createdBy : {
                            type : mongoose.Schema.Types.ObjectId ,     // the i in ObjectId is capital 
                            ref : "ModelName"           // the ModelName PASSED as the first args of mongoose.model('this one' , schemaName)   
                        } ,
                        subContentsArray : [
                            {
                                type : mongoose.Schema.Types.ObjectId
                                ref : "subContentModel"     // the modelName PASSED for that subContentModel
                            }
                        ] , // Array of sub content 
                    } ,
                    {timestamps : true} 
                )



*/

Postman - API Tool 
********************
> It is an application which helps in checking the requests of our backend without the 
    need to make a frontend 
> Installing it locally on desktop will allow to send request to http://localhost
> This allows us to test our apis without any frontend 

CRUD Operations in HTTP Methods : 
*************************************
- GET : 'READ' data (R)
- POST : 'create' data (C)
- PUT/PATCH : 'update' data (U)
- Delete : 'delete' data (D)

REST - Representational State Transfer 
*****************************************
- Standardized representation of APIs
- CRUD Operations 

Examples of CRUD Operations in a E-commerce website : 
- API for customers : 
    - R : GET /customer
    - C : POST /customer
    - U : PUT /customer/:id
    - D : Delete /customer/:id

- API for sellers : 
    - R : GET /seller
    - C : POST /seller
    - U : PUT /seller/:id
    - D : Delete /seller/:id

- API for products : 
    - R : GET /product
    - C : POST /product
    - U : PUT /product/:id
    - D : Delete /product/:id


Creating a Collection (Mongoose model)
******************************************
> By using mongoose.model() we can create a new database with a specific Schemas
> Convention to write the model name with first letter caps 
> First arguement is name of the collection and 
    second is the general schema of the data 
    we are going to store in that collection 
> Eg : 
    const Customer = mongoose.model('Customer' , {
        name : String ,
        email: String ,
        phoneNumber:Number,
        avatarURL:String
    })

> NOTE : Once the code is saved, it'll create the collection under the database : 'test'
    you can view it under the browse collection section



Getting the records from collections 
***************************************
> To fetch records from the mongodb we use an myModel.find({})
> It is used to return all of the documents in that collection
Eg : 
    await myModel.find({})
Eg : you want to find user john who's age >= 18 : 
    await myModel.find( { name:'John' , age:{ $gte : 18 } } )

Documentation : https://www.geeksforgeeks.org/mongoose-find-function/

> NOTE : 'await' is used as the operation is a asychronous operation, thus we would 
    need to add the keyword 'async' in the app.get() call as well. Eg : 

> Proper way to fetch the data :-
app.get('/customers' , async (req,res) => {
    
    try{    // if success 
        const customers = await  Customer.find()     //will find all the documents in the collect 
        res.json({
            status : 'SUCCESS' ,
            data: customers
        })
    }
    catch(error) {  // if failed 
        res.json({
            status : 'FAILURE' ,
            msg: `Something went wrong\n${error}`
        })
    }
})

> Remember that we always handle an asynchronous operation in 2 ways : 
    - if it was successful or 
    - if it failed

> We can also simulate an error by making one using throw : 
app.get('/customers' , async (req,res) => {
    throw new Error('Dummy Error')   // this will cause the catch block to activate
    try{
        const cust = await  Customer.find()
        res.json({
            status : 'SUCCESS' ,
            data: cust
        })
    }
    catch(error) {
        res.json({
            status : 'SUCCESS' ,
            msg: `Something went wrong\n${error}`
        })
    }
})


Few Status codes which we should know : 
200 - all ok
400 - Bad request (mistake of client)
404 - not found
500 - internal server error (mistake of server)


> We can return status using res.status(value) methods. Eg : 
    catch(error) {
        res.status(500).json({
            status : 'FAILURE' ,
            msg: `Something went wrong\n${error}`
        })
    }


POST request to Create Documents
************************************
app.post('/customers' , async (req,res) => {
    try{
        // throw new Error('Dummy Error')   // this will cause the catch block to activate
        
        const {name, email, phoneNumber, avatarURL} = req.body // destructuring the data from req.body which is sent from the client (Here sent by postman)
        
        await Customers.create({name, email, phoneNumber, avatarURL})   //sending data to create a record/document
        
        res.json({
            status: 'Success',
            msg : "Customer created"
        })
    }
    catch(error) {
        res.status(500).json({
            status : 'Failure' ,
            msg: `Something went wrong\n${error}`
        })
    }
})


mongoose.create() method : Documentation - https://masteringjs.io/tutorials/mongoose/create
----------------------
> function is used to insert one or more documents into a MongoDB collection. It's a convenient method 
    that combines the creation and insertion of documents into a single operation. The basic syntax for 
    the .create() function is as follows:
                                                                Model.create(doc(s), [options], [callback]);

> You can also use .create() to insert multiple documents by providing an array of documents as the first 
    argument:
                        UserModel.create(
                          [
                            { username: 'alice', email: 'alice@example.com' },
                            { username: 'bob', email: 'bob@example.com' },
                          ]
                        );


Simulating a html form in Postman : 
**************************************
Set : 
    method = POST 
    URL = whatever url 

Go to : 
    body -> x-www-form-urlencoded

DO : 
    key = Add the fields names of the form 
    Values = add some dummy data to send to backend 



Updating a document using PATCH : 
*************************************
> PUT is used to completed override the previous record (deletes the previous record 
    and fills in all the values again)
> PATCH just updates the selected records details only 
> We use the myModel.findByIdAndUpdate(id_of_record) - Documentation : https://www.geeksforgeeks.org/mongoose-findbyidandupdate-function/
> Eg : 
    app.patch('/customers/:id' , async (req,res)=>{
        try{
            const {id} = req.params ;                                                                   // getting the id to update using params 
            const {uname, email, phoneNumber, avatarURL} = req.body ;        // getting the form details from teh body object using destructuring
            
            console.log("Patching Request for : ",id)
            await CustomerModel.findByIdAndUpdate(id, {uname, email, phoneNumber, avatarURL})
                                                                                // Notice how the id is a separate parameter
    
            res.json({
                status: 'Success',
                uid_updated : id,
                msg : "Customer Updated"
            })
        }
        catch(error) {
            res.status(500).json({
                status : 'Failure' ,
                msg: `${error}`
            })
            console.log(error)
        }
    })



Simulating a PATCH request in POSTman : 
*******************************************
Set : 
    method = PATCH
    URL = whatever_url 

Go to : 
    body -> x-www-form-urlencoded

DO : 
    key = Add the fields names which needs to be updated
    Values = add the new value here 




Delete a document using PATCH : 
*************************************
To delete a document from the Collection we use the findByIdAndDelete(document_id)
Documentation - https://www.geeksforgeeks.org/mongoose-findbyidandremove-function/

app.delete('/customers/remove/:id' , async (req,res)=>{
    try{
        // throw new Error('Dummy Error')   // this will cause the catch block to activate
        let id = req.params.id ;
        console.log("Delete Request for : ",id)
        await CustomerModel.findByIdAndDelete(id)

        res.json({
            status: 'Success',
            uid_removed : id ,
            msg : "Customer Deleted"
        })
    }
    catch(error) {
        res.status(500).json({
            status : 'Failure' ,
            msg: `${error}`
        })
    }
    
})